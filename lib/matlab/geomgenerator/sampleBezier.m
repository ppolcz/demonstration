function [pt,grad] = sampleBezier(Bezier,t)
controlPoints = Bezier.controlPoints;
weights = Bezier.weights;
nControlPoints = size(controlPoints,1);
n = nControlPoints-1;
nSamples = length(t);
t = reshape(t,nSamples,1);
t(1)=t(1)+eps;
t(length(t)) = t(length(t))-eps;
B = zeros(nSamples,1);
xBez = zeros(nSamples,1);
yBez = zeros(nSamples,1);
wBez = zeros(nSamples,1);
diff_xBez = zeros(nSamples,1);
diff_yBez = zeros(nSamples,1);
diff_wBez = zeros(nSamples,1);
for i = 0:n
    B = nchoosek(n,i).*(t.^i).*((1-t).^(n-i));
    xBez = xBez + controlPoints(i+1,1)*B;
    yBez = yBez + controlPoints(i+1,2)*B;
    wBez = wBez + weights(i+1)*B;
    diff_B = nchoosek(n,i) .* ( -t.^i.*(n-i).*(1-t).^(n-i-1) + i.*t.^(i-1).*(1-t).^(n-i) );
    diff_xBez = diff_xBez+controlPoints(i+1,1)*diff_B;
    diff_yBez = diff_yBez+controlPoints(i+1,2)*diff_B;
    diff_wBez = diff_wBez+weights(i+1)*diff_B;
end
pt(:,1) = xBez./wBez;
pt(:,2) = yBez./wBez;
grad(:,1) = -xBez.*diff_wBez./(wBez).^2 + diff_xBez./wBez;
grad(:,2) = -yBez.*diff_wBez./(wBez).^2 + diff_yBez./wBez;
mag = sqrt(grad(:,1).^2+grad(:,2).^2);
grad(:,1) = grad(:,1)./mag;
grad(:,2) = grad(:,2)./mag;