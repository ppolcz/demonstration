(*************************************************************************
 *         This file was automatically generated by md2usage.py          *
 *                   on 2017-04-27 17:33:57.186990                       *
 *************************************************************************)


(* LUDecompositionWithPartialPivoting *)
LUDecompositionWithPartialPivoting::usage = "\
LUDecompositionWithPartialPivoting[m] generates a representation of the LU decomposition of the rectangular matrix m.

LUDecompositionWithPartialPivoting[m, options] uses options.

LUDecompositionWithPartialPivoting returns a list of two elements:

-   the first element is a combination of upper- and lower-triangular matrices;
-   the second element is a vector specifying rows used for pivoting.

LUDecompositionWithPartialPivoting is similar in functionality with the built-in LUDecomposition. It implements a _partial pivoting_ strategy in which the sorting can be configured using the options listed below. It also applies to general rectangular matrices as well as square matrices.

The triangular factors are recovered using GetLUMatrices.

The following options can be given:

-   ZeroTest (PossibleZeroQ): function used to decide if a pivot is zero;
-   RightDivide (Divide): function used to divide a vector by an entry;
-   Dot (Dot): function used to multiply vectors and matrices;
-   Pivoting (LUPartialPivoting): function used to sort rows for pivoting;
-   SuppressPivoting (False): whether to perform pivoting or not.

See also: LUDecompositionWithPartialPivoting, LUDecompositionWithCompletePivoting, GetLUMatrices, LUPartialPivoting.";

(* GetLUMatrices *)
GetLUMatrices::usage = "\
GetLUMatrices[m] extracts lower- and upper-triangular blocks produced by LDUDecompositionWithPartialPivoting and LDUDecompositionWithCompletePivoting.

For example:

    {lu, p} = LUDecompositionWithPartialPivoting[A];
    {l, u} = GetLUMatrices[lu];

returns the lower-triangular factor l and upper-triangular factor u.

See also: LUDecompositionWithPartialPivoting, LUDecompositionWithCompletePivoting.";

(* LURowReduceIncremental *)
LURowReduceIncremental::usage = "\
";

(* LURowReduce *)
LURowReduce::usage = "\
";

(* GetDiagonal *)
GetDiagonal::usage = "\
GetDiagonal[m] extracts the diagonal entries of matrix m.

GetDiagonal[m, s] extracts the block-diagonal entries of matrix m with block size s.

For example:

    d = GetDiagonal[{{1,-1,0},{-1,2,0},{0,0,3}}];

returns

    d = {1,2,3}

and

    d = GetDiagonal[{{1,-1,0},{-1,2,0},{0,0,3}}, {2,1}];

returns

    d = {{{1,-1},{-1,2}},3}

See also: LDLDecomposition.";

(* LUInverse *)
LUInverse::usage = "\
LUInverse[a] calculates the inverse of matrix a.

LUInverse uses the LUDecompositionWithPartialPivoting and the triangular solvers LowerTriangularSolve and UpperTriangularSolve.

See also: LUDecompositionWithPartialPivoting.";

(* UpperTriangularSolve *)
UpperTriangularSolve::usage = "\
UpperTriangularSolve[u, b] solves the upper-triangular system of equations ux = b using back-substitution.

For example:

    x = UpperTriangularSolve[u, b];

returns the solution x.

See also: LUDecompositionWithPartialPivoting, LUDecompositionWithCompletePivoting, LDLDecomposition.";

(* LowerTriangularSolve *)
LowerTriangularSolve::usage = "\
LowerTriangularSolve[l, b] solves the lower-triangular system of equations lx = b using forward-substitution.

For example:

    x = LowerTriangularSolve[l, b];

returns the solution x.

See also: LUDecompositionWithPartialPivoting, LUDecompositionWithCompletePivoting, LDLDecomposition.";

(* LUPartialPivoting *)
LUPartialPivoting::usage = "\
LUPartialPivoting[v] returns the index of the element with largest absolute value in the vector v. If v is a matrix, it returns the index of the element with largest absolute value in the first column.

LUPartialPivoting[v, f] sorts with respect to the function f instead of the absolute value.

See also: LUDecompositionWithPartialPivoting, LUCompletePivoting.";

(* LUCompletePivoting *)
LUCompletePivoting::usage = "\
LUCompletePivoting[m] returns the row and column index of the element with largest absolute value in the matrix m.

LUCompletePivoting[v, f] sorts with respect to the function f instead of the absolute value.

See also: LUDecompositionWithCompletePivoting, LUPartialPivoting.";

(* LUDecompositionWithCompletePivoting *)
LUDecompositionWithCompletePivoting::usage = "\
LUDecompositionWithCompletePivoting[m] generates a representation of the LU decomposition of the rectangular matrix m.

LUDecompositionWithCompletePivoting[m, options] uses options.

LUDecompositionWithCompletePivoting returns a list of four elements:

-   the first element is a combination of upper- and lower-triangular matrices;
-   the second element is a vector specifying rows used for pivoting;
-   the third element is a vector specifying columns used for pivoting;
-   the fourth element is the rank of the matrix.

LUDecompositionWithCompletePivoting implements a _complete pivoting_ strategy in which the sorting can be configured using the options listed below. It also applies to general rectangular matrices as well as square matrices.

The triangular factors are recovered using GetLUMatrices.

The following options can be given:

-   ZeroTest (PossibleZeroQ): function used to decide if a pivot is zero;
-   Divide (Divide): function used to divide a vector by an entry;
-   Dot (Dot): function used to multiply vectors and matrices;
-   Pivoting (LUCompletePivoting): function used to sort rows for pivoting;

See also: LUDecomposition, GetLUMatrices, LUCompletePivoting, LUDecompositionWithPartialPivoting.";

(* LDLDecomposition *)
LDLDecomposition::usage = "\
LDLDecomposition[m] generates a representation of the LDL decomposition of the symmetric or self-adjoint matrix m.

LDLDecomposition[m, options] uses options.

LDLDecomposition returns a list of four elements:

-   the first element is a combination of upper- and lower-triangular matrices;
-   the second element is a vector specifying rows and columns used for pivoting;
-   the third element is a vector specifying the size of the diagonal blocks (entries can be either 1 or 2);
-   the fourth element is the rank of the matrix.

LUDecompositionWithCompletePivoting implements a _Bunch-Parlett pivoting_ strategy in which the sorting can be configured using the options listed below. It applies only to square symmetric or self-adjoint matrices.

The triangular factors are recovered using GetLDUMatrices.

The following options can be given:

-   ZeroTest (PossibleZeroQ): function used to decide if a pivot is zero;
-   RightDivide (Divide): function used to divide a vector by an entry on the right;
-   LeftDivide (Divide): function used to divide a vector by an entry on the left;
-   Dot (Dot): function used to multiply vectors and matrices;
-   CompletePivoting (LUCompletePivoting): function used to sort rows for complete pivoting;
-   PartialPivoting (LUPartialPivoting): function used to sort matrices for complete pivoting;
-   Inverse (Inverse): function used to invert 2x2 diagonal blocks;
-   SelfAdjointMatrixQ (HermitianQ): function to test if matrix is self-adjoint;
-   SuppressPivoting (False): whether to perform pivoting or not.

See also: LUDecompositionWithPartialPivoting, LUDecompositionWithCompletePivoting, GetLUMatrices, LUCompletePivoting, LUPartialPivoting.";

(* GetLDUMatrices *)
GetLDUMatrices::usage = "\
GetLDUMatrices[m,s] extracts lower-, upper-triangular and diagonal blocks produced by LDLDecomposition.

For example:

    {ldl, p, s, rank} = LDLDecomposition[A];
    {l,d,u} = GetLDUMatrices[ldl,s];

returns the lower-triangular factor l, the upper-triangular factor u, and the block-diagonal factor d.

See also: LDLDecomposition.";
