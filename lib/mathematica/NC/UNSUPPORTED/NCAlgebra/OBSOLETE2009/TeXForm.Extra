Unprotect[Conjugate];
System`Conjugate/:Literal[Format[Conjugate[x_],TeXForm]] :=
         StringJoin["{ \\overline {",ToString[Format[x,TeXForm]],"} }"];
Protect[Conjugate];

Of/: Literal[Format[Of[x_,y_],TeXForm]] :=
      StringJoin[ToString[Format[x,TeXForm]]," ", ToString[Format[y,TeXForm]]];

Kernel/: Literal[Format[Kernel[pt_,operator_],TeXForm]] := 
      StringJoin["k_{",ToString[Format[pt,TeXForm]]," , ", ToString[Format[operator,TeXForm]],"}"];

dyad/:Literal[Format[dyad[x_,y_],TeXForm]] := 
         StringJoin[TeXFormAux[x]," \\otimes ",TeXFormAux[y]]; 

InnerProduct/:Literal[Format[InnerProduct[x_,y_],TeXForm]] :=
        StringJoin["\\langle ",ToString[Format[x,TeXForm]],",",
                   ToString[Format[y,TeXForm]]," \\rangle"];
       

Global`OutputAMatrix/:Literal[Format[Global`OutputAMatrix[x_],TeXForm]] := 
Block[{begin,rest,dim,dim1,dim2,i,j},
     begin = "\\pmatrix {";
     rest = "";
     dim = Dimensions[x];
     dim1 = dim[[1]];
     dim2 = dim[[2]];
     For[i=1,i<=dim1,i++,
         For[j=1,j<=dim2-1,j++,
             rest = StringJoin[rest," ", ToString[Format[x[[i,j]],TeXForm]],
                               " &"];
         ];
         rest = StringJoin[rest," ", ToString[Format[x[[i,dim2]],TeXForm]],
                           " \\cr"];
     ]; 
     StringJoin[begin,rest," }"]
];

HereditaryMatrixC[p_,str_,mat_,space___]:= Block[{temp},
    temp = Hereditary[p,mat,space];
    CommentToTeXFile[StringJoin[str," is "]];
    ExpressionToTeXFile[OutputAMatrix[temp]];
    Return[temp]
];

HereditaryMatrixE[p_,expr_,mat_,space___]:= Block[{temp},
    temp = Hereditary[p,mat,space];
    EqualityToTeXFile[expr,OutputAMatrix[temp]];
    Return[temp]
];

ForcedEquations[expr1_,expr2_]:= ForcedEquations[expr1,expr2," \n \n"];

ForcedEquations[expr1_,expr2_,text_] := Block[{temp,temp1,temp2},
    If[Not[Dimensions[expr1]==Dimensions[expr2]],
         Print["Error in ForcedEquations"];
       ,
         temp1 = Flatten[expr1];
         temp2 = Flatten[expr2];
         CommentToTeXFile[text];
         CommentToTeXFile["The following equations are forced."];
         For[j=1,j<=Length[temp1],j++,
             temp = ExpandNonCommutativeMultiply[temp1[[j]]-temp2[[j]]];
             If[Not[temp===0],EqualityToTeXFile[temp,0];
             ];
         ];
    ];
];

LookAtExpression[expr_] := Block[{},
    OpenTeXFile[];
    ExpressionToTeXFile[expr];
    CloseTeXFile[];
    TeXTheFile["file"];
    Run["dvipage file &"];
];

LookAtMatrix[mat_] := LookAtExpression[OutputAMatrix[mat]];

LookAtLongExpression[expr_] := Block[{},
    OpenTeXFile[];
    LongExpressionToTeXFile["file.tex",expr];
    CloseTeXFile[];
    TeXTheFile["file"];
    Run["dvipage file &"];
];

MatrixLongForm[mat_] := MatrixLongForm[mat,"file.tex"];

MatrixLongForm[mat_,str_String] := Block[{j,k,dim},
    ExpressionToTeXFile[str,OutputAMatrix[mat]];
    dim = Dimensions[mat];
    For[j=1,j<=dim[[1]],j++,
        CommentToTeXFile[str,StringJoin["Row ",ToString[j]," is "]];
        For[k=1,k<=dim[[2]],k++,
            LongExpressionToTeXFile[str,mat[[j,k]]];
        ];
    ];
];

LookAtMatrixLong[mat_] := Block[{},
    OpenTeXFile[];
    MatrixLongForm[mat];
    CloseTeXFile[];
    TeXTheFile["file"];
    Run["dvipage file &"];
];
     
CalculateHereditary[{p_,T_,str_,space___List,opts___Rules}] :=
Block[{temp},
     temp = Hereditary[p,T,space,opts];
     CommentToTeXFile[StringJoin["$",ToString[Format[p,TeXForm]],
                                 "$ of \n $$",
                                 ToString[Format[OutputAMatrix[T],
                                                 TeXForm]],
                                 "\n $$ \n is"]
     ];
     MatrixLongForm[temp];
     Return[temp]
];

HereditaryManyPolynomials[Poly_List,other___] :=
Block[{result,j,temp},
    result = {};
    For[j=1,j<=Length[Poly],j++,
        temp = Hereditary[Poly[[j]],other];
        AppendTo[result,temp];
    ];
    Return[result]
];

HereditaryManyPolynomialsTeX[Poly_List,mat_,Str_List,other___] :=
Block[{result,j,temp},
    result = {};
    For[j=1,j<=Length[Poly],j++,
        temp = CalculateHereditary[{Poly[[j]],mat,Str[[j]],other}];
        AppendTo[result,temp];
    ];
    Return[result]
];

QuickCalculate[Poly_List,mat_,other___] := Block[{},
     OpenTeXFile[];
     temp = HereditaryManyPolynomialsTeX[Poly,mat,
                                         Map[ToString,Poly],other];
     CloseTeXFile[];
     TeXTheFile["file"];
     Return[temp]
];
