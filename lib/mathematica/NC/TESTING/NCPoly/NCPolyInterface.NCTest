<< NCAlgebra`
<< NCPoly`
<< NCPolyInterface`

Block[
  {a,b,c,d,
  vars,NCExp,PolyExp,
  A,B,C
  },
  
  (* Test NCAlgebra interface *)

  (* TESTING NCToNCPoly/NCPolyToNC -- BEGIN *)

  Clear[a,b,c,d];
  SNC[a,b,c,d];

  (* NCToNCPoly *)
  
  vars = {{a},{b,c}};
  NCExp = a;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPolyMonomial[{0}, {1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = 2 b;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, 2 NCPolyMonomial[{1}, {1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = - c;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, -NCPolyMonomial[{2},{1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = b ** a;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPolyMonomial[{1,0}, {1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = 5 c ** b ** a;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, 5 NCPolyMonomial[{2,1,0},{1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = - b ** c ** b ** a;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, - NCPolyMonomial[{1,2,1,0}, {1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = a**a + b**b + c**c;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPoly[{1,1,1}, {{a,a},{b,b},{c,c}}, vars]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{Subscript[b,1],c}};
  NCExp = a**a + Subscript[b,1]**Subscript[b,1] + c**c;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];
  
  vars = {{a},{b,c}};
  NCExp = a**a -(- b**b - c**c);
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPoly[{1,1,1}, {{a,a},{b,b},{c,c}}, vars]];
  NCTest[(NCExp /. (x_ -> y_) -> x - y), NCExpExp];

  vars = {{a},{b,c}};
  NCExp = a**a - (- b**b - c**c);
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPoly[{1,1,1}, {{a,a},{b,b},{c,c}}, vars]];
  NCTest[(NCExp /. (x_ == y_) -> x - y), NCExpExp];

  vars = {{a},{b,c}};
  NCExp = a**a + b**b + c**c + d**d;
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCMonomialToDigits::InvalidSymbol];

  vars = {{a},{b,{c}}};
  NCExp = a**a + b**b + c**c;
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCPoly::InvalidList];

  vars = {{a},{b,c}};
  NCExp = a**a + b**b + c**c +inv[a];
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCPoly::NotPolynomial];

  NCExp = inv[a**a + b**b + c**c];
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCPoly::NotPolynomial];

  (* List functionality *)

  NCExp = { - b ** c ** b ** a, a**a + b**b + c**c };
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, {NCPoly[{-1}, {{b,c,b,a}}, vars], NCPoly[{1,1,1}, {{a,a},{b,b},{c,c}}, vars]}];
  NCTest[NCExp, NCExpExp];

  (* TESTING NCToNCPoly/NCPolyToNC -- END *)

  (* TESTING NCPolynomial FACILITIES *)

  (* NCCoefficientQ *)
  
  NCTest[NCCoefficientQ[1], True];
  NCTest[NCCoefficientQ[A], True];
  NCTest[NCCoefficientQ[2 A], True];
  NCTest[NCCoefficientQ[1 + A], True];

  NCTest[NCCoefficientQ[x], False];
  NCTest[NCCoefficientQ[1 + x], False];
  NCTest[NCCoefficientQ[x**x], False];
  NCTest[NCCoefficientQ[Exp[x]], False];

  NCTest[NCCoefficientQ[Subscript[A,1]], True];
  NCTest[NCCoefficientQ[2 Subscript[A,1]], True];
  NCTest[NCCoefficientQ[1 + Subscript[A,1]], True];

  NCTest[NCCoefficientQ[Subscript[x,1]], False];
  NCTest[NCCoefficientQ[1 + Subscript[x,1]], False];
  NCTest[NCCoefficientQ[Subscript[x,1]**Subscript[x,1]], False];
  NCTest[NCCoefficientQ[Exp[Subscript[x,1]]], False];

  (* NCMonomialQ *)

  NCTest[NCMonomialQ[1], True];
  NCTest[NCMonomialQ[A], True];
  NCTest[NCMonomialQ[x], True];
  NCTest[NCMonomialQ[A x], True];
  NCTest[NCMonomialQ[2 x], True];
  NCTest[NCMonomialQ[2 A x], True];
  NCTest[NCMonomialQ[x ** y], True];
  NCTest[NCMonomialQ[2 x ** y], True];
  NCTest[NCMonomialQ[A x ** y], True];
  NCTest[NCMonomialQ[2 A x ** y], True];
  NCTest[NCMonomialQ[(1 + A) x], True];

  NCTest[NCMonomialQ[Exp[x]], False];
  NCTest[NCMonomialQ[1 + y], False];
  NCTest[NCMonomialQ[x + y], False];
  NCTest[NCMonomialQ[2 A x ** Exp[x]], False];
  NCTest[NCMonomialQ[2 A x ** (x + y)], False];

  NCTest[NCMonomialQ[Subscript[A,1]], True];
  NCTest[NCMonomialQ[Subscript[x,1]], True];
  NCTest[NCMonomialQ[Subscript[A,1] Subscript[x,1]], True];
  NCTest[NCMonomialQ[2 Subscript[x,1]], True];
  NCTest[NCMonomialQ[2 Subscript[A,1] Subscript[x,1]], True];
  NCTest[NCMonomialQ[Subscript[x,1] ** Subscript[y,2]], True];
  NCTest[NCMonomialQ[2 Subscript[x,1] ** Subscript[y,2]], True];
  NCTest[NCMonomialQ[Subscript[A,1] Subscript[x,1] ** Subscript[y,2]], True];
  NCTest[NCMonomialQ[2 Subscript[A,1] Subscript[x,1] ** Subscript[y,2]], True];
  NCTest[NCMonomialQ[(1 + Subscript[A,1]) Subscript[x,1]], True];

  NCTest[NCMonomialQ[Exp[Subscript[x,1]]], False];
  NCTest[NCMonomialQ[1 + Subscript[y,2]], False];
  NCTest[NCMonomialQ[Subscript[x,1] + Subscript[y,2]], False];
  NCTest[NCMonomialQ[2 Subscript[A,1] Subscript[x,1] ** Exp[Subscript[x,1]]], False];
  NCTest[NCMonomialQ[2 Subscript[A,1] Subscript[x,1] ** (Subscript[x,1] + Subscript[y,2])], False];

  (* NCPolynomialQ *)
  
  NCTest[NCPolynomialQ[1], True];
  NCTest[NCPolynomialQ[A], True];
  NCTest[NCPolynomialQ[x], True];
  NCTest[NCPolynomialQ[A x], True];
  NCTest[NCPolynomialQ[2 x], True];
  NCTest[NCPolynomialQ[2 A x], True];
  NCTest[NCPolynomialQ[x ** y], True];
  NCTest[NCPolynomialQ[2 x ** y], True];
  NCTest[NCPolynomialQ[A x ** y], True];
  NCTest[NCPolynomialQ[2 A x ** y], True];

  NCTest[NCPolynomialQ[1 + x], True];
  NCTest[NCPolynomialQ[A + x], True];
  NCTest[NCPolynomialQ[x + y], True];
  NCTest[NCPolynomialQ[A x + x], True];
  NCTest[NCPolynomialQ[2 x + y], True];
  NCTest[NCPolynomialQ[2 A x - y], True];
  NCTest[NCPolynomialQ[x ** y + y], True];
  NCTest[NCPolynomialQ[2 x ** y - x], True];
  NCTest[NCPolynomialQ[A x ** y - x ** y], True];
  NCTest[NCPolynomialQ[2 A x ** y + x ** y], True];

  NCTest[NCPolynomialQ[(x + y)**x], True];
  NCTest[NCPolynomialQ[1 + (x + y)**x], True];
  NCTest[NCPolynomialQ[A + (x + y)**x], True];
  NCTest[NCPolynomialQ[(x + y)**x - (x - y)^3], True];

  NCTest[NCPolynomialQ[x + Exp[x]], False];

  (* ** product *)
  vars = {{a},{b,c}};
  A = NCPolyMonomial[{a},vars];
  B = NCPolyMonomial[{b},vars];
  C = NCPolyMonomial[{c},vars];

  NCTest[A, NCPolyMonomial[{0}, {1,2}]];
  NCTest[B, NCPolyMonomial[{1}, {1,2}]];
  NCTest[C, NCPolyMonomial[{2}, {1,2}]];

  NCTest[A**B, NCToNCPoly[a**b, vars]];
  NCTest[A**B**C, NCToNCPoly[a**b**c, vars]];
  NCTest[C**A**B, NCToNCPoly[c**a**b, vars]];

  NCTest[2 A**B, NCToNCPoly[2 a**b, vars]];
  NCTest[3 A**B**C, NCToNCPoly[3 a**b**c, vars]];
  NCTest[4 C**A**B, NCToNCPoly[4 c**a**b, vars]];

];