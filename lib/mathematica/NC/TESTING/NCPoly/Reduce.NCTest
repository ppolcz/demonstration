Block[
  {x,y,
   c1,m1,p1,
   c2,m2,p2,
   c3,m3,p3,
   q,r,
   f,g,h,c,m,G,
   g1,g2,g1p,
   isGraded
  },
  
  (* Test Reduction *)

  Clear[x, y];
  vars={{x,y}};

  (* p1 = x + x y + x y x x *)
  c1={1,1, 1};
  m1={{x},{x,y},{x,y,x,x}};
  p1=NCPoly[c1,m1,vars];

  {q,r} = NCPolyReduce[p1,p1];
  NCTest[p1 - NCPolyQuotientExpand[q,p1] - r, 0];
  NCTest[r, 0];

  {q,r}=NCPolyReduce[p1**p1,p1];
  NCTest[p1**p1 -NCPolyQuotientExpand[q,p1]-r, 0];
  NCTest[r, 0];

  (* p2 = x - 2 y x *)
  c2={1,-2};
  m2={{x},{y,x}};
  p2=NCPoly[c2,m2,vars];

  (* p1 = x + x y + x y x x *)
  (* p2 = x - 2 y x *)
  (* p1 = (-1/2) q1 p2 q2 + r *)
  (* q1 = q2 = x *)
  (* r = x y x x + x y + x + x x x / 2 - x y x x *)
  (* r = x + x y + x x x / 2 *)

  {q,r} = NCPolyReduce[p1, p2];
  NCTest[p1 - NCPolyQuotientExpand[q,p2] - r, 0];
  NCTest[NCPolyGetCoefficients[r], {1, 1, 1/2}];

  (* An example that does not divide! *)

  {q,r}=NCPolyReduce[p2,p1];
  NCTest[p2 - NCPolyQuotientExpand[q,p1]-r, 0];
  NCTest[r, p2];
  NCTest[q, {}];

  (* Complete x Incomplete Reduction *)

  p3 = p1 + NCPolyMonomial[{1,1,1,1}, 2];

  {q,r} = NCPolyReduce[p3,p2,False];
  NCTest[p3 -NCPolyQuotientExpand[q,p2]-r, 0];
  NCTest[r, p3];
  NCTest[q, {}];

  {q,r} = NCPolyReduce[p3,p2,True];
  NCTest[p3 -NCPolyQuotientExpand[q,p2]-r, 0];
  NCTest[NCPolyGetCoefficients[r], {1, 1, 1/2, 1}];

  (* List Reduction #1 *)

  f = NCPolyMonomial[{x,y,y},vars] - NCPolyMonomial[{x,x,y},vars];
  g = NCPolyMonomial[{y,x,y},vars] - NCPolyMonomial[{y},vars];

  {q,r}=NCPolyReduce[f,g,True];
  NCTest[f - NCPolyQuotientExpand[q,g] - r, 0];
  NCTest[NCPolyGetCoefficients[r], {-1, 1}];

  c3={1,1,1};
  m3={{x,x,y},{y,x,y},{y,y}};
  f=NCPoly[c3,m3,vars];

  c={1,-1};
  m={{x,y},{}};
  g1=NCPoly[c,m,vars];

  c={1,-1};
  m={{y,y},{}};
  g2=NCPoly[c,m,vars];

  {q,r}=NCPolyReduce[f,{g1,g2}];
  NCTest[f -NCPolyQuotientExpand[q,{g1,g2}]-r, 0];
  NCTest[NCPolyGetCoefficients[r], {1,1,1}];

  f=NCPolyMonomial[{3,3}->1,2]-NCPolyMonomial[{1,0}->1,2];
  g1p=g1+NCPolyMonomial[{0,0}->2,2];

  {q,r}=NCPolyReduce[f,{g1p,g2}];
  NCTest[f -NCPolyQuotientExpand[q,{g1p,g2}]-r, 0];
  NCTest[NCPolyGetCoefficients[r], {-1,-1}];

  {q,r}=NCPolyReduce[f,{g2,g1p},True];
  NCTest[f -NCPolyQuotientExpand[q,{g2,g1p}]-r, 0];
  NCTest[r, 0];

  (* List Reduction #2 *)

  r = NCPolyReduce[{g1,g2},{g1,g2}];
  NCTest[r, {}];

  r = NCPolyReduce[{g1,g2,g1p},{g1,g2}];
  NCTest[r, {NCPolyMonomial[{0,0}->2,2]}];

  (* Reduction with 1 *)

  f = NCPolyMonomial[{x,y,y},vars] - NCPolyMonomial[{x,x,y},vars];
  g = NCPolyMonomial[{y,x,y},vars] - NCPolyMonomial[{y},vars];
  h = NCPolyConstant[1,2];

  G = {f,g,h};
  G = NCPolyReduce[G];
  NCTest[Length[G], 1];
  NCTest[G[[1]]-h, 0];

  (* graded tests *)

  isGraded = (NCPolyOrderType[NCPolyMonomial[{1}, 1]] === NCPoly`NCPolyDegLexGraded);

  If[ !isGraded,
      Print["> Class does not support graded ordering. Skipping tests..."];
      Return[]
  ];

  vars={{x},{y}};

  (* p1 = x + x y + x y x x *)
  c1={1,1, 1};
  m1={{x},{x,y},{x,y,x,x}};
  p1=NCPoly[c1,m1,vars];

  {q,r} = NCPolyReduce[p1,p1];
  NCTest[p1 - NCPolyQuotientExpand[q,p1] - r, 0];
  NCTest[r, 0];

  {q,r}=NCPolyReduce[p1**p1,p1];
  NCTest[p1**p1 -NCPolyQuotientExpand[q,p1]-r, 0];
  NCTest[r, 0];

  (* p2 = x - 2 y x *)
  c2={1,-2};
  m2={{x},{y,x}};
  p2=NCPoly[c2,m2,vars];

  (* p1 = (-1/2) q1 p2 q2 + r *)
  (* q1 = q2 = x *)
  (* r = x y x x + x y + x + x x x / 2 - x y x x *)
  (* r = x + x x x / 2 + x y *)

  {q,r}=NCPolyReduce[p1,p2];
  NCTest[p1 - NCPolyQuotientExpand[q,p2]-r, 0];
  NCTest[NCPolyGetCoefficients[r], {1, 1/2, 1}];

  (* An example that does not divide! *)

  {q,r}=NCPolyReduce[p2,p1];
  NCTest[p2 - NCPolyQuotientExpand[q,p1]-r, 0];
  NCTest[r, p2];
  NCTest[q, {}];

  (* Complete x Incomplete Reduction *)

  p3 = p1 + NCPolyMonomial[{1,1,1,1}, {1,1}];

  {q,r} = NCPolyReduce[p3,p2,False];
  NCTest[p3 -NCPolyQuotientExpand[q,p2]-r, 0];
  NCTest[r, p3];
  NCTest[q, {}];

  {q,r} = NCPolyReduce[p3,p2,True];
  NCTest[p3 -NCPolyQuotientExpand[q,p2]-r, 0];
  NCTest[NCPolyGetCoefficients[r], {1, 1/2, 1, 1}];

  (* List Reduction #1 *)

  f = NCPolyMonomial[{x,y,y},vars] - NCPolyMonomial[{x,x,y},vars];
  g = NCPolyMonomial[{y,x,y},vars] - NCPolyMonomial[{y},vars];

  {q,r}=NCPolyReduce[f,g,True];
  NCTest[f - NCPolyQuotientExpand[q,g] - r, 0];
  NCTest[NCPolyGetCoefficients[r], {-1, 1}];

  c3={1,1,1};
  m3={{x,x,y},{y,x,y},{y,y}};
  f=NCPoly[c3,m3,vars];

  c={1,-1};
  m={{x,y},{}};
  g1=NCPoly[c,m,vars];

  c={1,-1};
  m={{y,y},{}};
  g2=NCPoly[c,m,vars];

  {q,r}=NCPolyReduce[f,{g1,g2}];
  NCTest[f -NCPolyQuotientExpand[q,{g1,g2}]-r, 0];
  NCTest[NCPolyGetCoefficients[r], {1,1,1}];

  f=NCPolyMonomial[{3,3}->1,{1,1}]-NCPolyMonomial[{1,0}->1,{1,1}];
  g1p=g1+NCPolyMonomial[{0,0}->2,{1,1}];

  {q,r}=NCPolyReduce[f,{g1p,g2}];
  NCTest[f -NCPolyQuotientExpand[q,{g1p,g2}]-r, 0];
  NCTest[NCPolyGetCoefficients[r], {-1,-1}];

  {q,r}=NCPolyReduce[f,{g2,g1p},True];
  NCTest[f -NCPolyQuotientExpand[q,{g2,g1p}]-r, 0];
  NCTest[r, 0];

  (* List Reduction #2 *)

  r = NCPolyReduce[{g1,g2},{g1,g2}];
  NCTest[r, {}];

  r = NCPolyReduce[{g1,g2,g1p},{g1,g2}];
  NCTest[r, {NCPolyMonomial[{0,0}->2,{1,1}]}];

  (* Reduction with 1 *)

  f = NCPolyMonomial[{x,y,y},vars] - NCPolyMonomial[{x,x,y},vars];
  g = NCPolyMonomial[{y,x,y},vars] - NCPolyMonomial[{y},vars];
  h = NCPolyConstant[1,{1,1}];

  G = {f,g,h};
  G = NCPolyReduce[G];
  NCTest[Length[G], 1];
  NCTest[G[[1]]-h, 0];

];