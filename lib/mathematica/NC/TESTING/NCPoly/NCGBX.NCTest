<< NCAlgebra`
<< NCGBX`

Block[
  {a,b,c,d,
  vars,NCExp,PolyExp
  },
  
  (* Test NCAlgebra interface *)

  (* TESTING SetKnowns/SetUnknowns -- BEGIN *)

  Clear[a,b,c,d];
  SNC[a,b,c,d];

  SetKnowns[a,b];
  SetUnknowns[c,d];
  NCTest[GetMonomialOrder[], {{a,b},{c},{d}}];

  SetKnowns[a,b];
  SetUnknowns[{c,d}];
  NCTest[GetMonomialOrder[], {{a,b},{c,d}}];

  SetKnowns[a,b];
  SetUnknowns[{c},{d}];
  NCTest[GetMonomialOrder[], {{a,b},{c},{d}}];

  SetKnowns[{a},{b}];
  SetUnknowns[{c},{d}];
  NCTest[GetMonomialOrder[], {{a,b},{c},{d}}];

  SetKnowns[b,c];
  NCTest[GetMonomialOrder[], {{b,c}}];

  SetKnowns[{a,b}];
  NCTest[GetMonomialOrder[], {{a,b}}];

  SetKnowns[{{a},{{b}}}];
  NCTest[GetMonomialOrder[], {{a,b}}];

  SetUnknowns[{c,d}];
  NCTest[GetMonomialOrder[], {{a,b},{c,d}}];

  SetUnknowns[d,c];
  NCTest[GetMonomialOrder[], {{a,b},{d},{c}}];

  SetUnknowns[d,{c}];
  NCTest[GetMonomialOrder[], {{a,b},{d},{c}}];

  SetUnknowns[d,{c,b}];
  NCTest[GetMonomialOrder[], {{a,b},{d},{c,b}}];

  ClearMonomialOrder[];
  SetUnknowns[{a,b}];
  NCTest[GetMonomialOrder[], {{a,b}}];

  SetUnknowns[{c,d}];
  NCTest[GetMonomialOrder[], {{c,d}}];

  SetKnowns[a,b];
  SetUnknowns[c,d];
  SetKnowns[c,d];
  SetUnknowns[a,b];
  NCTest[GetMonomialOrder[], {{c,d},{a},{b}}];

  (* TESTING SetKnowns/SetUnknowns -- END *);

  (* TESTING SetMonomialOrder -- BEGIN *)

  SetMonomialOrder[a,b];
  NCTest[GetMonomialOrder[], {{a},{b}}];

  SetMonomialOrder[{a},{b}];
  NCTest[GetMonomialOrder[], {{a},{b}}];

  SetMonomialOrder[{a,b}];
  NCTest[GetMonomialOrder[], {{a,b}}];

  SetMonomialOrder[{a,b},{c,d}];
  NCTest[GetMonomialOrder[], {{a,b},{c,d}}];

  SetMonomialOrder[{a,b},{c}];
  NCTest[GetMonomialOrder[], {{a,b},{c}}];

  SetMonomialOrder[{a,b},c];
  NCTest[GetMonomialOrder[], {{a,b},{c}}];

  NCTestCheck[SetMonomialOrder[{a,{b}},c],
	      $Failed,
	      SetMonomialOrder::InvalidOrder];

  NCTestCheck[SetMonomialOrder[{a,b},{{c}}],
	      $Failed,
	      SetMonomialOrder::InvalidOrder];

  (* Monomial Order with inv's *)
  
  SetMonomialOrder[{a,b},inv[c]];
  NCTest[GetMonomialOrder[], {{a,b},{inv[c]}}];

  SetMonomialOrder[{a,b},{inv[c]}];
  NCTest[GetMonomialOrder[], {{a,b},{inv[c]}}];

  SetMonomialOrder[{a,b},inv[1+c]];
  NCTest[GetMonomialOrder[], {{a,b},{inv[1+c]}}];

  SetMonomialOrder[{a,b},inv[1+inv[1+c]]];
  NCTest[GetMonomialOrder[], {{a,b},{inv[1+inv[1+c]]}}];

  (* Monomial Order with tps's and ajs *)
  
  SetMonomialOrder[{a,b},tp[c]];
  NCTest[GetMonomialOrder[], {{a,b},{tp[c]}}];

  SetMonomialOrder[{a,b},{tp[c]}];
  NCTest[GetMonomialOrder[], {{a,b},{tp[c]}}];

  SetMonomialOrder[{a,tp[a],b},{tp[c]}];
  NCTest[GetMonomialOrder[], {{a,tp[a],b},{tp[c]}}];

  NCTestCheck[SetMonomialOrder[{a,b},tp[1+c]],
	      $Failed,
	      SetMonomialOrder::InvalidOrder];

  SetMonomialOrder[{a,b},aj[c]];
  NCTest[GetMonomialOrder[], {{a,b},{aj[c]}}];

  SetMonomialOrder[{a,b},{aj[c]}];
  NCTest[GetMonomialOrder[], {{a,b},{aj[c]}}];

  SetMonomialOrder[{a,aj[a],b},{aj[c]}];
  NCTest[GetMonomialOrder[], {{a,aj[a],b},{aj[c]}}];

  NCTestCheck[SetMonomialOrder[{a,b},aj[1+c]],
	      $Failed,
	      SetMonomialOrder::InvalidOrder];

  NCTestCheck[SetMonomialOrder[{a,b},Exp[c]],
	      $Failed,
	      SetMonomialOrder::InvalidOrder];

  (* TESTING SetMonomialOrder -- END *)

  SetMonomialOrder[{a,b},{d},{c,b}];
  NCTest[NCPolyDisplayOrder[GetMonomialOrder[]], 
         DisplayForm[RowBox[List[a, "<", b, "\[LessLess] ", d, "\[LessLess] ", c, "<", b]]]];
  NCTest[PrintMonomialOrder[], 
         DisplayForm[RowBox[List[a, "<", b, "\[LessLess] ", d, "\[LessLess] ", c, "<", b]]]];

  SetMonomialOrder[{a,b},{d},{c,b,e}];
  NCTest[NCPolyDisplayOrder[GetMonomialOrder[]], 
         DisplayForm[RowBox[List[a, "<", b, "\[LessLess] ", d, "\[LessLess] ", c, "<", b, "<", e]]]];
  NCTest[PrintMonomialOrder[], 
         DisplayForm[RowBox[List[a, "<", b, "\[LessLess] ", d, "\[LessLess] ", c, "<", b, "<", e]]]];

  (* TESTING NCMakeGB -- BEGIN *)

  SetMonomialOrder[a,b];
  NCTest[NCMakeGB[{b**a**b, b**a - a}, VerboseLevel -> 0, ReturnRules -> True],
         {a ** a -> 0, a ** b -> 0, b ** a -> a}];
  NCTest[NCMakeGB[{b**a**b, b**a - a}, VerboseLevel -> 0, ReturnRules -> False],
         {a ** a, a ** b, b ** a - a}];
	 
  NCTest[NCMakeGB[{a,b}, VerboseLevel -> 0, ReturnRules -> True],
         {a -> 0, b -> 0}];
  NCTest[NCMakeGB[{a,b}, VerboseLevel -> 0, ReturnRules -> False],
         {a, b}];
	   
  NCTestCheck[NCMakeGB[{a,b,c}],
	      $Failed,
              NCMakeGB::MissingSymbol];

  NCTestCheck[NCMakeGB[{a,b,inv[a]}, VerboseLevel -> 0],
	      {1 -> 0},
              NCMakeGB::AdditionalRelations];

  NCTestCheck[NCMakeGB[{a,b,kinv[a]}],
	      $Failed,
              NCMakeGB::UnknownFunction];

  (* TESTING NCMakeGB -- END *)

];