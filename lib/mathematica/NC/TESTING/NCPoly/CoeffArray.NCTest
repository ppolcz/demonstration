<< NCPoly`

Block[
  {vars,poly,mat,p,d,
   p1,p2,
   answer,
   x,y,z},

  vars = {{x, y}};
  poly = NCPoly[{1, -1}, {{x, y}, {y, x}}, vars];
  p1 = poly;
  
  mat = NCPolyCoefficientArray[poly];
  answer = SparseArray[{0,0,0,0,1,-1,0}];
  NCTest[mat, answer];

  NCTestCheck[NCPolyCoefficientArray[poly, 1],
	      $Failed,
	      NCPolyCoefficientArray::InvalidDegree];

  p = NCPolyFromCoefficientArray[mat, vars];
  NCTest[p, poly];

  poly = NCPoly[{2, 1, -1, 1}, {{x}, {x, y}, {y, x}, {x,x,y}}, vars];
  
  mat = NCPolyCoefficientArray[poly];
  answer = SparseArray[{0,2,0,0,1,-1,0,0,1,0,0,0,0,0,0}];
  NCTest[mat, answer];

  p = NCPolyFromCoefficientArray[mat, vars];
  NCTest[p, poly];

  poly = NCPoly[{2, 1, -1, 1}, {{x}, {x, y}, {y, x}, {x,x,x}}, vars];
  p2 = poly;
  
  mat = NCPolyCoefficientArray[poly];
  answer = SparseArray[{0,2,0,0,1,-1,0,1,0,0,0,0,0,0,0}];
  NCTest[mat, answer];

  p = NCPolyFromCoefficientArray[mat, vars];
  NCTest[p, poly];

  poly = {p1, p2};
  mat = NCPolyCoefficientArray[poly];
  answer = SparseArray[{{0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0}, {0,2,0,0,1,-1,0,1,0,0,0,0,0,0,0}}];
  NCTest[mat, answer];

  p = NCPolyFromCoefficientArray[mat, vars];
  NCTest[p, {p1,p2}];

  vars = {x, y, z};
  poly = NCPoly[{1, -1}, {{x, y}, {y, x}}, vars];
  mat = NCPolyCoefficientArray[poly];
  answer = SparseArray[{
    0,
    0,0,0,
    0,1,0,-1,0,0,0,0,0
    }];
  NCTest[mat, answer];
  NCTest[NCPolyFromCoefficientArray[mat, vars], poly];

  vars = {{x, y, z}};
  poly = NCPoly[{1, -1}, {{x, y}, {y, x}}, vars];
  mat = NCPolyCoefficientArray[poly];
  NCTest[mat, answer];
  
  vars = {{x, y, z}};
  poly = NCPoly[{1, -1, 3}, {{x, y}, {y, x}, {z, z}}, vars];
  mat = NCPolyCoefficientArray[poly];
  answer = SparseArray[{
    0,
    0,0,0,
    0,1,0,-1,0,0,0,0,3
    }];
  NCTest[mat, answer];
  
  vars = {{x}, {y}, {z}};
  poly = NCPoly[{1, -1, 3}, {{x, y}, {y, x}, {z, z}}, vars];
  mat = NCPolyCoefficientArray[poly];
  NCTest[mat, answer];
  
  vars = {{x, y, z}};
  poly = NCPoly[{1, -1, 3}, {{x, y}, {y, x}, {z, z, z}}, vars];
  mat = NCPolyCoefficientArray[poly];
  answer = SparseArray[{
    0,
    0,0,0,
    0,1,0,-1,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3
    }];
  NCTest[mat, answer];

  vars = {{x}, {y, z}};
  poly = NCPoly[{1, -1, 3}, {{x, y}, {y, x}, {z, z, z}}, vars];
  mat = NCPolyCoefficientArray[poly];
  NCTest[mat, answer];

  vars = {{x, y}, {z}};
  poly = NCPoly[{1, -1, 3}, {{x, y}, {y, x}, {z, z, z}}, vars];
  mat = NCPolyCoefficientArray[poly];
  NCTest[mat, answer];

  vars = {x, y, z};
  poly = NCPoly[{1, -1, 3}, {{x, y}, {y, x}, {z, z, z}}, vars];
  mat = NCPolyCoefficientArray[poly];
  NCTest[mat, answer];

  vars = {x,y,z};
  poly = NCPoly[{1, 2, 3, -1, -2, -3, 1/2},
                {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}},
		vars];
  mat = NCPolyCoefficientArray[poly];
  answer = SparseArray[1.*{1, 2, 0, 3, 0, -1, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1/2}];
  NCTest[Norm[mat - answer] < 1^-6];
  NCTest[NCPolyFromCoefficientArray[mat, vars], poly];

  vars = {{x},{y,z}};
  poly = NCPoly[{1, 2, 3, -1, -2, -3, 1/2},
                {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}},
		vars];
  mat = NCPolyCoefficientArray[poly];
  NCTest[Norm[mat - answer] < 1^-6];
  NCTest[NCPolyFromCoefficientArray[mat, vars], poly];

  (* Wrong array size *)
  NCTestCheck[
    NCPolyFromCoefficientArray[PadRight[mat, Length[mat] + 1], vars],
    $Failed,
    NCPolyFromCoefficientArray::InvalidDegree
  ];

  (* Wrong variable size *)
  NCTestCheck[
    NCPolyFromCoefficientArray[PadRight[mat, Length[mat] + 1], {x,y}],
    $Failed,
    NCPolyFromCoefficientArray::InvalidDegree
  ];

];
