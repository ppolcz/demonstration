(* :Title: 	Diff.NCTest *)

(* :Author: 	mauricio *)

<< NCSystem`

Module[ 
   {answer,expr,tmp,
    sys,sys1,sys2,
    a,b,c,d,
    a1,b1,c1,d1,
    a2,b2,c2,d2,
    AA,BB,CC,DD,S},

   SetCommutative[AA,BB,CC,DD,S];
   SetNonCommutative[a,b,c,d];
   SetNonCommutative[a1,b1,c1,d1];
   SetNonCommutative[a2,b2,c2,d2];

   expr = System[{{AA}},{{BB}},{{CC}},{{DD}}];
   answer = NCSystem[{{AA}},{{BB}},{{CC}},{{DD}}];
   NCTest[expr, answer];
   NCTest[NCSystemQ[expr], True];
   NCTest[expr[[1]], {{AA}}];
   NCTest[expr[[2]], {{BB}}];
   NCTest[expr[[3]], {{CC}}];
   NCTest[expr[[4]], {{DD}}];
   NCTest[NCSystemToTransferFunction[expr,S], {{CC inv[S - AA] BB + DD}}];

   answer = NCSystem[{{AA}},{{CC}},{{BB}},{{DD}}];
   NCTest[tp[expr], answer];

   sys = System[{{a}},{{b}},{{c}},{{d}}];

   expr = sys;
   answer = NCSystem[{{a}},{{b}},{{c}},{{d}}];
   NCTest[expr, answer];
   NCTest[NCSystemQ[expr], True];
   NCTest[expr[[1]], {{a}}];
   NCTest[expr[[2]], {{b}}];
   NCTest[expr[[3]], {{c}}];
   NCTest[expr[[4]], {{d}}];

   expr = NCSControllabilityMatrix[sys];
   answer = {{b}};
   NCTest[expr, answer];

   expr = NCSControllabilityMatrix[sys, 3];
   answer = {{b, a**b, a**a**b}};
   NCTest[expr, answer];

   expr = NCSObservabilityMatrix[sys];
   answer = {{c}};
   NCTest[expr, answer];

   expr = NCSObservabilityMatrix[sys, 2];
   answer = {{c},{c**a}};
   NCTest[expr, answer];

   answer = NCSystem[{{tp[a]}},{{tp[c]}},{{tp[b]}},{{tp[d]}}];
   NCTest[tp[sys], answer];

   expr = NCSControllabilityMatrix[tp[sys]];
   answer = {{tp[c]}};
   NCTest[expr, answer];

   expr = NCSObservabilityMatrix[tp[sys]];
   answer = {{tp[b]}};
   NCTest[expr, answer];

   sys1 = System[{{a1}},{{b1}},{{c1}},{{d1}}];
   sys2 = System[{{a2}},{{b2}},{{c2}},{{d2}}];

   sys = NCSConnectParallel[sys1,sys2];
   answer = NCSystem[{{a1,0},{0,a2}},{{b1,0},{0,b2}},{{c1,0},{0,c2}},{{d1,0},{0,d2}}];
   NCTest[sys, answer];

   expr = NCSControllabilityMatrix[sys];
   answer = {{b1,0,a1**b1,0},{0,b2,0,a2**b2}};
   NCTest[expr, answer];

   expr = NCSObservabilityMatrix[sys];
   answer = {{c1,0},{0,c2},{c1**a1,0},{0,c2**a2}};
   NCTest[expr, answer];

   sys = NCSConnectPlus[sys1,sys2];
   answer = NCSystem[{{a1,0},{0,a2}},{{b1},{b2}},{{c1,c2}},{{d1+d2}}];
   NCTest[sys, answer];

   expr = NCSControllabilityMatrix[sys];
   answer = {{b1,a1**b1},{b2,a2**b2}};
   NCTest[expr, answer];

   expr = NCSObservabilityMatrix[sys];
   answer = {{c1,c2},{c1**a1,c2**a2}};
   NCTest[expr, answer];

   sys = NCSConnectSeries[sys1,sys2];
   answer = NCSystem[{{a1,0},{b2**c1,a2}},{{b1},{b2**d1}},{{d2**c1,c2}},{{d2**d1}}];
   NCTest[sys, answer];

   expr = NCSControllabilityMatrix[sys];
   answer = {{b1,a1**b1},{b2**d1,a2**b2**d1+b2**c1**b1}};
   NCTest[expr, answer];

   expr = NCSObservabilityMatrix[sys];
   answer = {{d2**c1,c2},{d2**c1**a1+c2**b2**c1,c2**a2}};
   NCTest[expr, answer];

   sys = System[{{a}},{{b}},{{c}},{{d}}];
   expr = NCSInverse[sys];
   answer = NCSystem[{{a-b**inv[d]**c}},
                     {{b**inv[d]}},
                     {{-inv[d]**c}},
		     {{inv[d]}}];
   NCTest[expr, answer];

   expr = NCSystemToTransferFunction[
             NCSConnectSeries[sys, NCSInverse[sys]], S][[1,1]];
   NCTest[NCSimplifyRational[expr], 1];

   (* TODO: REVERSE PRODUCT STILL FAILS! *)
   expr = NCSystemToTransferFunction[
             NCSConnectSeries[NCSInverse[sys], sys], S][[1,1]];
   NCTest[NCSimplifyRational[expr], 1];

   Quiet[
     tmp = False;     
     Check[
       sys = System[{{a}},{{b}},{{c}},{{0}}];
       expr = NCSInverse[sys];
       answer = $Failed;
       NCTest[expr, answer];
      ,
       tmp = True;
      ,
       MatrixDecompositions::Singular
     ];
     NCTest[tmp, True];
    ,
     MatrixDecompositions::Singular
   ];

   Quiet[
     tmp = False;     
     Check[
       sys = System[{{a}},{{b,0}},{{c}},{{0,0}}];
       expr = NCSInverse[sys];
       answer = $Failed;
       NCTest[expr, answer];
      ,
       tmp = True;
      ,
       MatrixDecompositions::Square
     ];
     NCTest[tmp, True];
    ,
     MatrixDecompositions::Square
   ];

   (* Controllable Realization *)
   sys = System[{{1,0},{0,1}},
                {{1},{2}},
		{{1,1}},
		{{0}}];
   expr = NCSControllableSubspace[NCSControllabilityMatrix[sys[[1]],sys[[2]]]];
   answer = {{{0, 1}, {1, -1/2}}, 1};
   NCTest[expr, answer];

   expr = NCSControllableRealization[sys];
   answer = NCSystem[{{1}}, {{2}}, {{3/2}}, {{0}}];
   NCTest[expr, answer];

   expr = NCSystemToTransferFunction[expr, S];
   answer = {{3/(S - 1)}};
   NCTest[expr, answer];

   expr = NCSObservableSubspace[NCSObservabilityMatrix[sys[[1]],sys[[3]]]];
   answer = {{{1, -1}, {0, 1}}, 1};
   NCTest[expr, answer];

   expr = NCSObservableRealization[sys];
   answer = NCSystem[{{1}}, {{3}}, {{1}}, {{0}}];
   NCTest[expr, answer];

   expr = NCSystemToTransferFunction[expr, S];
   answer = {{3/(S - 1)}};
   NCTest[expr, answer];
   
   expr = NCSystemToTransferFunction[sys, S];
   answer = {{3/(S - 1)}};
   NCTest[expr, answer];

   expr = NCSMinimalRealization[sys];
   answer = NCSystem[{{1}}, {{2}}, {{3/2}}, {{0}}];
   NCTest[expr, answer];

];
