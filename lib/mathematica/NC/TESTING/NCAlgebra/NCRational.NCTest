<< NCRealization`
<< NCRational`

Module[
  {k,answer,answer1,answer2,x,y,z,X,Y,W,
   expr,rat,vars,poly,
   Cv,Pencil,Bv,
   CSym, PencilSym,
   det,
   A,B,C,D
  },

  SetNonCommutative[x,y,z];
  SetCommutative[A,B];

  (* CommutativeQ *)
  vars = {x,y};
  poly = 1;
  expr = NCToNCRational[poly, vars];
  answer = NCRational[
             SparseArray[{},{3,0,0}],
             SparseArray[{},{0,1}], 
             SparseArray[{},{1,0}], 
	     SparseArray[{{poly}}], vars, {Linear->True,Polynomial->True}];
  NCTest[expr, answer];
  NCTest[NCROrder[expr], 0];
  NCTest[NCRationalToNC[expr], SparseArray[{{poly}}]];

  poly = A+B;
  expr = NCToNCRational[poly, vars];
  answer = NCRational[
             SparseArray[{},{3,0,0}],
             SparseArray[{},{0,1}], 
             SparseArray[{},{1,0}], 
	     SparseArray[{{poly}}], vars, {Linear->True,Polynomial->True}];
  NCTest[expr, answer];
  NCTest[NCROrder[expr], 0];
  NCTest[NCRationalToNC[expr], SparseArray[{{poly}}]];

  (* Monomials *)

  poly = x;
  vars = {x,y};
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0}, {0, 1}}, 
               {{0, -1}, {0, 0}}, 
               {{0, 0}, {0, 0}}}],
             SparseArray[{{0}, {1}}], 
             SparseArray[{{1,0}}], 
	     SparseArray[{{0}}], vars, {Linear->True,Polynomial->True}];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = y;
  vars = {x,y};
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0}, {0, 1}}, 
               {{0, 0}, {0, 0}}, 
               {{0, -1}, {0, 0}}}],
             SparseArray[{{0}, {1}}], 
             SparseArray[{{1,0}}], 
	     SparseArray[{{0}}], vars, {Linear->True,Polynomial->True}];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = z;
  vars = {x,y};
  NCTestCheck[NCToNCRational[poly, {x,y}], $Failed, 
              NCToNCRational::Failed];

  poly = A x;
  vars = {x,y};
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0}, {0, 1}}, 
               {{0, -1}, {0, 0}}, 
               {{0, 0}, {0, 0}}}],
             SparseArray[{{0}, {A}}], 
             SparseArray[{{1,0}}], 
	     SparseArray[{{0}}], vars, {Linear->True,Polynomial->True}];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = B + A x;
  vars = {x,y};
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0}, {0, 1}}, 
               {{0, -1}, {0, 0}}, 
               {{0, 0}, {0, 0}}}],
             SparseArray[{{0}, {A}}], 
             SparseArray[{{1,0}}], 
	     SparseArray[{{B}}], vars, {Linear->True,Polynomial->True}];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = A x + B y;
  vars = {x,y};
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0}, {0, 1}}, 
               {{0, -A/B}, {0, 0}}, 
               {{0, -1}, {0, 0}}}],
             SparseArray[{{0}, {B}}], 
             SparseArray[{{1,0}}], 
	     SparseArray[{{0}}], vars, {Linear->True,Polynomial->True}];
  NCTest[expr == answer, True];
  NCTest[NCExpand[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = x**y;
  vars = {x,y};
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, 
               {{0, -1, 0}, {0, 0, 0}, {0, 0, 0}}, 
               {{0, 0, 0}, {0, 0, -1}, {0, 0, 0}}}],
             SparseArray[{{0}, {0}, {1}}], 
             SparseArray[{{1, 0, 0}}], 
	     SparseArray[{{0}}], vars, {Polynomial -> True}];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 3];

  expr = NCRControllableRealization[expr];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 3];

  expr = NCRMinimalRealization[expr];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 3];

  expr = NCRTranspose[expr];
  answer = NCRational[
             SparseArray[{
               {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, 
               Transpose[{{0, -1, 0}, {0, 0, 0}, {0, 0, 0}}], 
               Transpose[{{0, 0, 0}, {0, 0, -1}, {0, 0, 0}}]}],
             SparseArray[{{1}, {0}, {0}}], 
             SparseArray[{{0, 0, 1}}], 
	     SparseArray[{{0}}], vars, {Polynomial->True}];
  NCTest[expr == answer, True];
  NCTest[NCROrder[expr], 3];

  poly = y**x;
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, 
               {{0, 0, 0}, {0, 0, -1}, {0, 0, 0}}, 
               {{0, -1, 0}, {0, 0, 0}, {0, 0, 0}}}],
             SparseArray[{{0}, {0}, {1}}], 
             SparseArray[{{1, 0, 0}}], 
	     SparseArray[{{0}}], vars, {Polynomial->True}];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 3];

  expr = NCRMinimalRealization[expr];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 3];

  poly = x**x;
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, 
               {{0, -1, 0}, {0, 0, -1}, {0, 0, 0}}, 
               {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}}],
             SparseArray[{{0}, {0}, {1}}], 
             SparseArray[{{1, 0, 0}}], 
	     SparseArray[{{0}}], vars, {Polynomial->True}];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 3];

  expr = NCRMinimalRealization[expr];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 3];

  poly = x**y**x;
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1,0,0,0}, {0,1,0,0}, {0,0,1,0}, {0,0,0,1}}, 
               {{0,-1,0,0}, {0,0,0,0}, {0,0,0,-1},{0,0,0,0}}, 
               {{0,0,0,0}, {0,0,-1,0}, {0,0,0,0}, {0,0,0,0}}}],
             SparseArray[{{0}, {0}, {0}, {1}}], 
             SparseArray[{{1, 0, 0, 0}}], 
	     SparseArray[{{0}}], vars, {Polynomial->True}];
  NCTest[expr == answer, True];

  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 4];

  expr = NCRMinimalRealization[expr];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 4];

  (* Nonmiminal monomial *)

  rat = NCRational[
          {{{0, -1, 0, 0}, {-1, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 1, 0}}, 
           {{1, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, 
           {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, -1, 0}, {0, 0, 0, 0}}}, 
          {{0}, {0}, {0}, {1}}, 
          {{0, 1, 0, 0}}, {{0}}, vars, {Polynomial->True}];
  expr = NCRationalToNC[rat];
  answer = {{x**y}};
  NCTest[expr,answer];

  expr = NCRControllableRealization[rat];
  NCTest[NCRationalToNC[expr],NCRationalToNC[rat]];
  answer = NCRational[{
             {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, 
             {{0, 0, 0}, {0, 0, 0}, {0, -1, 0}}, 
             {{0, 0, 0}, {-1, 0, 0}, {0, 0, 0}}}, 
            {{1}, {0}, {0}}, {{0, 0, 1}}, {{0}}, vars, {Polynomial->True}];
  NCTest[expr,answer];
  answer = {{{{0, 0, 1}},
             {{1, 0, 0}, {-y, 1, 0}, {0, -x, 1}}, 
             {{1}, {0}, {0}}, {{0}}}, vars};
  NCTest[NCRationalToCanonical[expr],answer];

  expr = NCRObservableRealization[rat];
  NCTest[NCRationalToNC[expr],NCRationalToNC[rat]];
  answer = NCRational[{
             {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, 
             {{0, 1, 0}, {0, 0, 0}, {0, 0, 0}}, 
             {{0, 0, 0}, {0, 0, -1}, {0, 0, 0}}}, 
             {{0}, {0}, {1}}, {{-1, 0, 0}}, {{0}}, vars, {Polynomial->True}];
  NCTest[expr,answer];
  answer = {{{{-1, 0, 0}},
             {{1, x, 0}, {0, 1, -y}, {0, 0, 1}}, 
             {{0}, {0}, {1}}, {{0}}}, vars};
  NCTest[NCRationalToCanonical[expr],answer];

  expr = NCRMinimalRealization[rat];
  NCTest[NCRationalToNC[expr],NCRationalToNC[rat]];
  answer = NCRational[{
             {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, 
             {{0, 0, 0}, {0, 0, 0}, {0, -1, 0}}, 
             {{0, 0, 0}, {-1, 0, 0}, {0, 0, 0}}}, 
            {{1}, {0}, {0}}, {{0, 0, 1}}, {{0}}, vars, {Polynomial->True}];
  NCTest[expr,answer];

  (* Polynomials *)

  vars = {x,y};
  poly = 1 + x;
  expr = NCToNCRational[poly, vars];
  answer = NCRational[
             SparseArray[{
               {{1, 0}, {0, 1}}, 
               {{0, -1}, {0, 0}}, 
               {{0, 0}, {0, 0}}}],
             SparseArray[{{0}, {1}}], 
             SparseArray[{{1,0}}], 
	     SparseArray[{{1}}], vars, {Linear->True,Polynomial->True}];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = 1 + y;
  expr = NCToNCRational[poly, vars];
  answer = NCRational[
             SparseArray[{
               {{1, 0}, {0, 1}}, 
               {{0, 0}, {0, 0}}, 
               {{0, -1}, {0, 0}}}],
             SparseArray[{{0}, {1}}], 
             SparseArray[{{1,0}}], 
	     SparseArray[{{1}}], vars, {Linear->True,Polynomial->True}];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = x + y;
  expr = NCToNCRational[poly, vars];
  answer = NCRational[
             SparseArray[{
               {{1, 0}, {0, 1}}, 
               {{0, -1}, {0, 0}}, 
               {{0, -1}, {0, 0}}}],
             SparseArray[{{0}, {1}}], 
             SparseArray[{{1,0}}], 
	     SparseArray[{{0}}], vars, {Linear->True,Polynomial->True}];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = 1 + x + y;
  expr = NCToNCRational[poly, vars];
  answer = NCRational[
             SparseArray[{
               {{1, 0}, {0, 1}}, 
               {{0, -1}, {0, 0}}, 
               {{0, -1}, {0, 0}}}],
             SparseArray[{{0}, {1}}], 
             SparseArray[{{1,0}}], 
	     SparseArray[{{1}}], vars, {Linear->True,Polynomial->True}];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = 2 + 3 x;
  expr = NCToNCRational[poly, vars];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = 1 + x**y;
  expr = NCToNCRational[poly, vars];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 3];

  poly = 1 + 2 x**y;
  expr = NCToNCRational[poly, vars];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 3];

  poly = 1 + x + x**y + y**x;
  expr = NCToNCRational[poly, vars];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 4];
  
  poly = x**y+y**x;
  expr = NCToNCRational[poly, vars];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 4];

  poly = x**y+x**x;
  expr = NCToNCRational[poly, vars];
  NCTest[NCExpand[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 3];

  poly = x**y+x**x+y**x;
  expr = NCToNCRational[poly, vars];
  NCTest[NCExpand[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 4];

  poly = 1+x**y+x**x+y**x;
  expr = NCToNCRational[poly, vars];
  NCTest[NCExpand[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 4];

  poly = (1+x)**(1+y);
  expr = NCToNCRational[poly, vars];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 3];

  poly = (1+x)**(1+y)**(1+x);
  expr = NCToNCRational[poly, vars];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 4];

(*
  poly = NCExpand[(1+x+y)**(1+x-y)**(1+2 x+3 y)**(1 + 4 x + 7 y)**(1+x-3 y)**(1-y)**(1-y+9 x)];
  expr = NCToNCRational[poly, vars];
  tmp = NCRationalToNC[expr];
  NCTest[NCROrder[expr], 8];

  poly = NCExpand[(1+x+y)**(1+x-y)**(1+2 x+3 y)**(1 + 4 x + 7 y)**(1+x-3 y)**(1-y)**(1-y+9 x)+(1 + x -3 y)**(1 + x**x-y**y)];
  expr = NCToNCRational[poly, vars];
  tmp = NCRationalToNC[expr];
  NCTest[NCROrder[expr], 10];
*)

  (* rational *)

  poly = inv[x];
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],1];

  poly = inv[x] + inv[y];
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],2];

  poly = 1 + inv[x];
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],1];

  poly = 1 + 2 inv[x];
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],1];

  poly = 1 + 2 inv[1 + x];
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],1];

  poly = 1 + 2 inv[1 + 3 x];
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],1];

  poly = 1 + 2 inv[1 + x ** y];
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{NCSimplifyRational[poly]}}];
  NCTest[NCROrder[expr],2];

  poly = 1 + 2 inv[1 + 3 x ** y];
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{NCSimplifyRational[poly]}}];
  NCTest[NCROrder[expr],2];

  poly = 1 + y**x - 2 inv[1 + 3 x ** y];
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{NCSimplifyRational[poly]}}];
  NCTest[NCROrder[expr],5];

  poly = 1 + 2 inv[x] + 3 inv[y];
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],2];

  poly = 1 + 2 y**inv[x] + 3 inv[y]**x;
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],4];

  poly = y**inv[1 - x**y];
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],3];

  poly = inv[1 - y**x]**y;
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],3];

  (* rational cancellation *)
  poly = y**inv[1 - x**y] + inv[1 - y**x]**y;
  expr = NCToNCRational[poly, vars];
   
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{NCSimplifyRational[poly]}}];
  NCTest[NCROrder[expr],6];

  rat = NCRMinimalRealization[expr];
  NCTest[NCSimplifyRational[NCRationalToNC[rat]],{{NCSimplifyRational[poly]}}];
  NCTest[NCROrder[rat],2];

  poly = y**inv[1 - x**y] - inv[1 - y**x]**y;
  expr = NCToNCRational[poly, vars];
   
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{NCSimplifyRational[poly]}}];
  NCTest[NCROrder[expr],6];

  rat = NCRMinimalRealization[expr];
  NCTest[NCROrder[rat],0];

  poly = inv[1 - inv[1 + x]];
  expr = NCToNCRational[poly, vars];
  NCTest[NCROrder[expr],1];

  (* Commutatator realizations *)
  
  poly = x**y-y**x;
  rat = NCToNCRational[poly, vars];
  expr = NCRControllableRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 4];

  expr = NCRMinimalRealization[rat, CommutativeVariables -> {1,2}];
  NCTest[NCRationalToNC[expr],SparseArray[{{0}}]];
  NCTest[NCROrder[expr], 0];

  poly = 1 + 2 inv[x ** y];
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{NCSimplifyRational[poly]}}];
  NCTest[NCROrder[expr],2];

  (* products with inverses *)

  poly = inv[x]**y;
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],2];

  poly = x**inv[y];
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],2];

  poly = x**x**inv[y]**x;
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],4];

  poly = x**x**inv[y]**x**y**inv[x];
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],2+1+2+1];

  poly = inv[1 + x]**y;
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],2];

  poly = inv[1 + x]**(1+y);
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{NCSimplifyRational[poly]}}];
  NCTest[NCROrder[expr],2];

  poly = inv[1 + 3 x]**(1 + 2 y);
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{NCSimplifyRational[poly]}}];
  NCTest[NCROrder[expr],2];

  poly = Exp[1 + 3 x]**(1 + 2 y);
  NCTestCheck[NCToNCRational[poly, vars], 
              $Failed,
 	      NCToNCRational::Failed];

  poly = inv[x**y];
  expr = NCToNCRational[poly, vars];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{NCSimplifyRational[poly]}}];
  NCTest[NCROrder[expr],2];

  poly = inv[1-x-y**inv[1-x]**y]-(1/2)(inv[1-x+y]+inv[1-x-y]);
  expr = NCToNCRational[poly, vars];
  NCTest[NCROrder[expr],8];

  expr = NCRMinimalRealization[expr];
  NCTest[NCROrder[expr],0];

  (* Controllability Gramian *)

  poly = (1+x)**(1+y)**(1+x);
  vars = {x,y};
  rat = NCToNCRational[poly, vars];
  {A,B,C,D} = Normal[rat];
  X = NCRControllabilityGramian[rat];
  answer = A[[1]].X.Transpose[A[[1]]] - A[[2]].X.Transpose[A[[2]]] - A[[3]].X.Transpose[A[[3]]] - B.Transpose[B];
  NCTest[Norm[N[answer]] < 10^(-6), True];

  poly = x**x-y**y;
  vars = {x,y};
  rat = NCToNCRational[poly, vars];
  {A,B,C,D} = Normal[rat];
  X = NCRControllabilityGramian[rat];
  answer = A[[1]].X.Transpose[A[[1]]] - A[[2]].X.Transpose[A[[2]]] - A[[3]].X.Transpose[A[[3]]] - B.Transpose[B];
  NCTest[Norm[N[answer]] < 10^(-6), True];

  poly = 1 + y**x - 2 inv[1 + 3 x ** y];
  vars = {x,y};
  rat = NCToNCRational[poly, vars];
  {A,B,C,D} = Normal[rat];
  X = NCRControllabilityGramian[rat];
  answer = A[[1]].X.Transpose[A[[1]]] - A[[2]].X.Transpose[A[[2]]] - A[[3]].X.Transpose[A[[3]]] - B.Transpose[B];
  NCTest[Norm[N[answer]] < 10^(-6), True];

  (* Observability Gramian *)

  poly = (1+x)**(1+y)**(1+x);
  vars = {x,y};
  rat = NCToNCRational[poly, vars];
  {A,B,C,D} = Normal[rat];
  Y = NCRObservabilityGramian[rat];
  answer = Transpose[A[[1]]].Y.A[[1]] - Transpose[A[[2]]].Y.A[[2]] - Transpose[A[[3]]].Y.A[[3]] - Transpose[C].C;
  NCTest[Norm[N[answer]] < 10^(-6), True];

  poly = x**x-y**y;
  vars = {x,y};
  rat = NCToNCRational[poly, vars];
  {A,B,C,D} = Normal[rat];
  Y = NCRObservabilityGramian[rat];
  answer = Transpose[A[[1]]].Y.A[[1]] - Transpose[A[[2]]].Y.A[[2]] - Transpose[A[[3]]].Y.A[[3]] - Transpose[C].C;
  NCTest[Norm[answer] < 10^(-6), True];

  poly = 1 + y**x - 2 inv[1 + 3 x ** y];
  vars = {x,y};
  rat = NCToNCRational[poly, vars];
  {A,B,C,D} = Normal[rat];
  Y = NCRObservabilityGramian[rat];
  answer = Transpose[A[[1]]].Y.A[[1]] - Transpose[A[[2]]].Y.A[[2]] - Transpose[A[[3]]].Y.A[[3]] - Transpose[C].C;
  NCTest[Norm[N[answer]] < 10^(-6), True];

];
