<< Sylvester`
<< SDPSylvester`

Begin["NCTest`Local`"];

Module[
  {exp, answer,
   A,B,Id,Ze,
   syms,dims,
   AAv,BBv,CCv,
   Yv,Xv,Sv,
   Y,X,S,iters,
   m,n,
   Idm,Zemm,Zenm,Idx,IdW,Zenpm,

   x1,X1,XX1,
   Y1,Y11,
   P2,Q2,H2,
   H11,
   XX2,XX3,
   L,W,
   FvDualEval, FvPrimalEval, 
   FvSylvesterEval, FvSylvesterDiagonalEval,	
   FvSylvesterSolve, FvSylvesterSolveFactored,
   FDualEval, FPrimalEval, 
   FSylvesterEval, FSylvesterDiagonalEval, 
   FSylvesterSolve, FSylvesterSolveFactored
  },

  A = {{-1,1},{0,-2}};
  B = {{2,1},{1,2}};
  Id = IdentityMatrix[2];
  Ze = ConstantArray[0, {2,2}];

  (* Test #1 : 2 x 2 Lyapunov inequality *)

  AA = {
   {
      {2 A,Id}
   }
  ,
   {
      {-Id,Id}
   }
  };
  CC={-Id, Ze};
  BB={-Id};

  dims = {{2,2}};
  syms = {True};

  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}, SymmetricVariables->{1}];

  << SDP`;

  {Yv, Xv, Sv, iters} = SDPSolve[{AAv, BBv, CCv}, DebugLevel -> 0];

  << SDPSylvester`;

  {Y, X, S, iters} = SDPSolve[{AA, BB, CC}, SymmetricVariables -> {1}, DebugLevel -> 0];

  exp = Abs[Total[X - Xv, Infinity]];
  NCTest[exp < 10^(-7), True];

  exp = Abs[Total[S - Sv, Infinity]];
  NCTest[exp < 10^(-7), True];

  (* Options *)

  NCTestCheck[
     {Y, X, S, iters} = SDPSolve[{AA, BB, CC}, SymmetricVariables -> {1}, SearchDirection -> KSH];
    ,
     PrimalDual::Error
  ];

  (* Test #2: n x n Lyapunov equation *)

   n = 40;
   SeedRandom[1234];
   Id = IdentityMatrix[n];
   A = RandomReal[{-10,10}, {n, n}];
   A -= 1.1 * Max[Re[Eigenvalues[A]]] * Id;
   Ze = ConstantArray[0, {n,n}];

   AA = {
     {
       {2 A,Id}
     }
    ,
     {
       {-Id,Id}
     }
  };
  CC={-Id, Ze};
  BB={-Id};

  dims = {{n,n}};
  syms = {True};

  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}, SymmetricVariables->{1}];

  << SDP`;
  << SDPFlat`;

  {Yv, Xv, Sv, iters} = SDPSolve[{AAv, BBv, CCv}, DebugLevel -> 0];

  << SDPSylvester`;

  {Y, X, S, iters} = SDPSolve[{AA, BB, CC}, SymmetricVariables -> {1}, DebugLevel -> 0];

  exp = Abs[Total[X - Xv, Infinity]];
  NCTest[exp < 10^(-7), True];

  exp = Abs[Total[S - Sv, Infinity]];
  NCTest[exp < 10^(-7), True];

  (* Test #3: n x n Riccati inequality *)

  n=2;
  m=2;

  Id=IdentityMatrix[n];
  A=RandomReal[{-10,10},{n,n}];
  A-=1.1*Max[Re[Eigenvalues[A]]]*Id;
  B=RandomReal[{-10,10},{n,m}];
  Ze=ConstantArray[0,{n,n}];

  Idm=IdentityMatrix[m];
  Zemm=ConstantArray[0,{m,m}];
  Zenm=ConstantArray[0,{n,m}];
  IdX=ArrayFlatten[{{Transpose[Zenm]},{Id}}];
  IdW=ArrayFlatten[{{Idm},{Zenm}}];
  Zenpm=ConstantArray[0,{n+m,n+m}];

  AA={
    {{2 A,Id},{2B,Id},{Zenm,Transpose[Zenm]}},(* A X + B L < -I *)
    {{-IdX,Transpose[IdX]},{-2 IdW,Transpose[IdX]},{- IdW,Transpose[IdW]}} (* -[W, L; L^T X] < 0 *)
  };
  CC={-Id,Zenpm};
  BB={Ze,Transpose[Zenm],-Idm};

  dims = {{n,n},{m,n},{m,m}};
  syms = {True,False,True};

  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}, SymmetricVariables->{1,3}];

  << SDP`;
  << SDPFlat`;

  {Yv, Xv, Sv, iters} = SDPSolve[{AAv, BBv, CCv}, DebugLevel -> 0];

  << SDPSylvester`;

  {Y, X, S, iters} = SDPSolve[{AA, BB, CC}, SymmetricVariables -> {1,3}, DebugLevel -> 0];

  exp = Abs[Total[X - Xv, Infinity]];
  NCTest[exp < 10^(-7), True];

  exp = Abs[Total[S - Sv, Infinity]];
  NCTest[exp < 10^(-4), True];

  (* Test #4: n x m Riccati inequality *)

  n=3;
  m=2;

  Id=IdentityMatrix[n];
  A=RandomReal[{-10,10},{n,n}];
  A-=1.1*Max[Re[Eigenvalues[A]]]*Id;
  B=RandomReal[{-10,10},{n,m}];
  Ze=ConstantArray[0,{n,n}];

  Idm=IdentityMatrix[m];
  Zemm=ConstantArray[0,{m,m}];
  Zenm=ConstantArray[0,{n,m}];
  IdX=ArrayFlatten[{{Transpose[Zenm]},{Id}}];
  IdW=ArrayFlatten[{{Idm},{Zenm}}];
  Zenpm=ConstantArray[0,{n+m,n+m}];

  AA={
    {{2 A,Id},{2B,Id},{Zenm,Transpose[Zenm]}},(* A X + B L < -I *)
    {{-IdX,Transpose[IdX]},{-2 IdW,Transpose[IdX]},{- IdW,Transpose[IdW]}} (* -[W, L; L^T X] < 0 *)
  };
  CC={-Id,Zenpm};
  BB={Ze,Transpose[Zenm],-Idm};

  dims = {{n,n},{m,n},{m,m}};
  syms = {True,False,True};

  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}, SymmetricVariables->{1,3}];

  << SDP`;
  << SDPFlat`;

  {Yv, Xv, Sv, iters} = SDPSolve[{AAv, BBv, CCv}, DebugLevel -> 0];

  << SDPSylvester`;

  {Y, X, S, iters} = SDPSolve[{AA, BB, CC}, SymmetricVariables -> {1,3}, DebugLevel -> 0];

  exp = Abs[Total[X - Xv, Infinity]];
  NCTest[exp < 10^(-7), True];

  exp = Abs[Total[S - Sv, Infinity]];
  NCTest[exp < 10^(-5), True];

  (* Test #5: n x m Riccati inequality *)

  n=20;
  m=3;

  Id=IdentityMatrix[n];
  A=RandomReal[{-10,10},{n,n}];
  A-=1.1*Max[Re[Eigenvalues[A]]]*Id;
  B=RandomReal[{-10,10},{n,m}];
  Ze=ConstantArray[0,{n,n}];

  Idm=IdentityMatrix[m];
  Zemm=ConstantArray[0,{m,m}];
  Zenm=ConstantArray[0,{n,m}];
  IdX=ArrayFlatten[{{Transpose[Zenm]},{Id}}];
  IdW=ArrayFlatten[{{Idm},{Zenm}}];
  Zenpm=ConstantArray[0,{n+m,n+m}];

  AA={
    {{2 A,Id},{2B,Id},{Zenm,Transpose[Zenm]}},(* A X + B L < -I *)
    {{-IdX,Transpose[IdX]},{-2 IdW,Transpose[IdX]},{- IdW,Transpose[IdW]}} (* -[W, L; L^T X] < 0 *)
  };
  CC={-Id,Zenpm};
  BB={Ze,Transpose[Zenm],-Idm};

  dims = {{n,n},{m,n},{m,m}};
  syms = {True,False,True};

  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}, SymmetricVariables->{1,3}];

  << SDP`;
  << SDPFlat`;

  {Yv, Xv, Sv, iters} = SDPSolve[{AAv, BBv, CCv}, DebugLevel -> 0];

  << SDPSylvester`;

  {Y, X, S, iters} = SDPSolve[{AA, BB, CC}, SymmetricVariables -> {1,3}, DebugLevel -> 0];

  exp = Abs[Total[X - Xv, Infinity]];
  NCTest[exp < 10^(-7), True];

  exp = Abs[Total[S - Sv, Infinity]];
  NCTest[exp < 10^(-4), True];

];

End[];